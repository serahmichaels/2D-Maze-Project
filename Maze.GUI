package com.javamaze.maze.gui;

import com.javamaze.maze.Maze;
import com.javamaze.maze.Player;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

/**
 * Java Maze Game - GUI Class
 * Group 5: Written by Eric Reyes
 * Date: 2024-12-13
 * Description: This class handles the creation and display of the GUI, ties together the maze and player logic,
 *              and processes user input for navigation.
 */
public class MazeGUI extends JFrame {
    private Maze maze;
    private Player player;
    private JPanel mazePanel;

    /**
     * Constructor for the MazeGUI class.
     * Initializes the maze, player, and GUI components.
     * 
     * @param rows Number of rows in the maze.
     * @param cols Number of columns in the maze.
     */
    public MazeGUI(int rows, int cols) {
        maze = new Maze(rows, cols);
        player = new Player(maze);

        setTitle("Maze Game");
        setSize(800, 800);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        mazePanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                drawMaze(g);
            }
        };
        mazePanel.setFocusable(true);
        mazePanel.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                handleMovement(e.getKeyCode());
            }
        });

        add(mazePanel, BorderLayout.CENTER);
    }

    /**
     * Draws the maze and player on the panel.
     * 
     * @param g Graphics object for drawing.
     */
    private void drawMaze(Graphics g) {
        char[][] grid = maze.getGrid();
        int cellSize = Math.min(mazePanel.getWidth() / grid[0].length, mazePanel.getHeight() / grid.length);

        for (int row = 0; row < grid.length; row++) {
            for (int col = 0; col < grid[row].length; col++) {
                if (grid[row][col] == '#') {
                    g.setColor(Color.BLACK);
                } else if (grid[row][col] == 'S') {
                    g.setColor(Color.GREEN);
                } else if (grid[row][col] == 'E') {
                    g.setColor(Color.RED);
                } else {
                    g.setColor(Color.WHITE);
                }
                g.fillRect(col * cellSize, row * cellSize, cellSize, cellSize);
                g.setColor(Color.GRAY);
                g.drawRect(col * cellSize, row * cellSize, cellSize, cellSize);
            }
        }

        // Draw player
        g.setColor(Color.BLUE);
        Maze.Point playerPos = player.getPosition();
        g.fillOval(playerPos.getCol() * cellSize, playerPos.getRow() * cellSize, cellSize, cellSize);
    }

    /**
     * Handles player movement based on key input.
     * 
     * @param keyCode The key code for the pressed key.
     */
    private void handleMovement(int keyCode) {
        boolean moved = false;
        switch (keyCode) {
            case KeyEvent.VK_UP:
                moved = player.move('U');
                break;
            case KeyEvent.VK_DOWN:
                moved = player.move('D');
                break;
            case KeyEvent.VK_LEFT:
                moved = player.move('L');
                break;
            case KeyEvent.VK_RIGHT:
                moved = player.move('R');
                break;
        }

        if (moved) {
            mazePanel.repaint();
            if (player.hasReachedEnd()) {
                JOptionPane.showMessageDialog(this, "Congratulations! You've reached the end of the maze.");
                player.reset();
                maze.regenerateMaze();
                mazePanel.repaint();
            }
        }
    }

    /**
     * Main method to launch the maze game.
     * 
     * @param args Command line arguments.
     */
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            MazeGUI mazeGUI = new MazeGUI(15, 15);
            mazeGUI.setVisible(true);
        });
    }
}

